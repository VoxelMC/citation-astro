---

---

<html lang="en">
    <head>
        <meta charset="utf-8" />
        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
        <meta name="viewport" content="width=device-width" />
        <meta name="generator" content={Astro.generator} />
        <title>ACS Citation Generator | Labcatr</title>
    </head>
    <body>
        <main>
            <div class="mx-auto w-11/12 rounded-lg bg-neutral my-10 py-8 px-8">
                <div class="w-full mb-4">
                    <h1 class="text-2xl font-bold">ACS Citation Generator</h1>
                    <p class="text-lg">
                        This is a citation generator for the <a
                            class="font-semibold text-secondary underline"
                            href="https://pubs.acs.org/doi/full/10.1021/acsguide.40303"
                            >American Chemical Society</a
                        > style.
                    </p>
                </div>
                <!-- Input for a DOI and a div where its outputs will be generated -->
                <div class="flex flex-row items-end pb-4">
                    <div class="form-control w-1/4 mr-4">
                        <label for="doi-input" class="label"
                            ><span class="label-text">DOI</span></label
                        >
                        <input
                            id="doi-input"
                            type="text"
                            class="input input-neutral rounded-lg bg-base-200"
                            placeholder="10.1000/182"
                        />
                    </div>
                    <div class="flex items-center">
                        <button id="generate" class="btn btn-base-100 mr-4"
                            >Generate</button
                        >
                        <div id="status" class="text-error font-bold"></div>
                    </div>
                </div>
                <div
                    id="output"
                    class="mx-auto w-full rounded-lg bg-base-200 min-h-[6rem] p-4"
                >
                </div>
                <div class="mt-4">
                    <button id="copy-text" type="button" class="btn btn-success mr-4"
                        >Copy to Clipboard</button
                    >
                    <button id="copy-mark" type="button" class="btn btn-primary mr-4"
                        >Copy as Markdown</button
                    >
                    <button id="copy-html" type="button" class="btn btn-secondary mr-4"
                        >Copy as HTML</button
                    >
                    <button id="delete-data" type="button" class="btn btn-warning"
                        >Delete All Data</button
                    >
                </div>
            </div>
        </main>

        <h2 class="mx-auto w-fit">Created by <b>Trevor Fox</b> on October 14th, 2023.</h2>
    </body>

    <script>
        import { $citationsMap } from '../atoms/citationsMap.ts';
        import sanitizeHtml from 'sanitize-html';

        document.addEventListener('DOMContentLoaded', () => {
            const citationsMap = $citationsMap.get();
            const citationsMapClean: HTMLElement[] = citationsMap.map(
                (citation: HTMLElement) => {
                    const div = document.createElement('div');
                    const sanitized = sanitizeHtml(citation.outerHTML);
                    console.log(sanitized);
                    div.innerHTML = sanitized;
                    return div.firstChild as HTMLElement;
                },
            );
            console.log(citationsMap);
            console.log(citationsMapClean);
            if (citationsMap.length > 0) {
                document.getElementById('output')!.append(...citationsMapClean);
            }
        });
    </script>

    <script>
        import { $citationsMap } from '../atoms/citationsMap.ts';

        const statusDiv = document.getElementById('status') as HTMLDivElement;

        function htmlToElement(html: string): HTMLElement {
            var template = document.createElement('template');
            html = html.trim(); // Never return a text node of whitespace as the result
            template.innerHTML = html;
            return (
                (template.content.children.item(0) as HTMLElement) || new HTMLElement()
            );
        }

        function normalizeDoi(doi: string): string {
            let out = doi.trim();
            // Remove the https://doi.org/ prefix if it exists
            out = out.replace('https://doi.org/', '');
            // Remove a leading slash if it exists
            out = out[0] == '/' ? out.replace('/', '') : out;

            return out;
        }

        document.getElementById('generate')?.addEventListener('click', async () => {
            const inputValue = (document?.getElementById('doi-input') as HTMLInputElement)
                ?.value;
            const currentDoi =
                inputValue.length >= 1 ? inputValue.split(',') : ['No Doi Entered'];

            if (currentDoi[0] == 'No Doi Entered') {
                statusDiv.innerHTML = `No DOI entered.`;
                return;
            }

            for (const doi of currentDoi) {
                const normalizedDoi: string = normalizeDoi(doi);
                const url = `https://api.crossref.org/works/${normalizedDoi}`;
                statusDiv.innerHTML = `<span class="text-success">Fetching citation for ${currentDoi}</span>.`;

                let data = await fetch(url);
                console.log(
                    'Fetching from: ' + url + '. Click this to view the JSON response.',
                );

                if (!data.ok) {
                    statusDiv.textContent =
                        'Error fetching data from Crossref. Did you enter a valid DOI?';
                } else {
                    const jsonData = (await data.json()) as any;
                    const authors = jsonData.message.author
                        .map((author: { family: string; given: string }) => {
                            return `${author.family}, ${author.given
                                .split(' ')
                                .map(name => name[0])
                                .join('. ')}.`.trim();
                        })
                        .join('; ');

                    const title = jsonData.message.title[0].replace(/\n/g, '');

                    const journalAbbr =
                        jsonData.message['short-container-title'][0] ??
                        jsonData.message['container-title'][0] ??
                        jsonData.message['publisher'];
                    const year = jsonData.message['published']['date-parts'][0][0];

                    const volume = jsonData.message.volume;
                    const pages = jsonData.message.page;
                    const url = jsonData.message.URL.replace('dx.doi.org', 'doi.org');

                    const htmlCitation = `
					<div class="article-citation-inner">
						${authors} ${title}. <i>${journalAbbr ?? ''}</i> <b>${year}</b>${
                            volume ? ', <i>' + volume + '</i>, ' : ''
                        }${pages}. ${url}.
					</div>`
                        .toString()
                        .replace('undefined', '');

                    const citationElement = htmlToElement(htmlCitation);

                    document.getElementById('output')!.append(citationElement);
                    $citationsMap.set([...$citationsMap.get(), citationElement]);

                    (document.getElementById('doi-input') as HTMLInputElement).value = '';
                    statusDiv.innerHTML = `<span class="text-blue-400">Done.</span>`;
                }
            }
        });
    </script>

    <script>
        import TurndownService from 'turndown';
        const turndownService = new TurndownService({
            headingStyle: 'atx',
            codeBlockStyle: 'fenced',
            emDelimiter: '*',
            bulletListMarker: '-',
            fence: '```',
            strongDelimiter: '**',
            linkStyle: 'inlined',
            linkReferenceStyle: 'full',
        });

        document.getElementById('copy-text')?.addEventListener('click', () => {
            const output = document.getElementById('output')?.innerText;
            copyToClipboard(output ?? '', 'text');
        });

        document.getElementById('copy-mark')?.addEventListener('click', () => {
            const output = turndownService.turndown(
                document.getElementById('output') as TurndownService.Node,
            );
            copyToClipboard(output ?? '', 'markdown');
        });

        document.getElementById('copy-html')?.addEventListener('click', () => {
            const output = document.getElementById('output')?.innerHTML;
            copyToClipboard(output ?? '', 'html');
        });

        function copyToClipboard(text: string, format: string) {
            // Copy the content of the output div to the clipboard
            navigator.clipboard.writeText(text).then(
                function () {
                    console.log(
                        'Copying to clipboard was successful! Formatted as: ' + format,
                    );
                },
                function (err) {
                    console.error('Async: Could not copy text: ', err);
                },
            );
        }
    </script>

    <script>
        import { $citationsMap } from '../atoms/citationsMap.ts';
        document.getElementById('delete-data')?.addEventListener('click', () => {
            console.log($citationsMap.get());
            $citationsMap.set([]);
            console.log($citationsMap.get());
            document.getElementById('output')!.innerHTML = '';
        });
    </script>
</html>
